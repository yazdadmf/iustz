void encounter(Party &party, Zombie &zombie) {
    int target = 4; // Default target for defending

    while (true) {
        // Display status of party and zombie
        party.displaystatus();
        zombie.displaystatus();
		
        // Display options for each character in the party
        for (int i = 0; i < party.group.size(); i++) {
        	move:
            cout << "\n------------------------\n"
                 << setw(10) << left << "1. Attack"
                 << "| " << setw(10) << "2. Use item"
                 << "| " << setw(10) << "3. Defend\n"
                 << "------------------------\n";

            // Check if a key is pressed
       
                char key = _getch(); // Get the pressed key
                switch (key) {
                    case '1':
                        party.group[i].attack(&zombie);
                        break;
                    case '2': {
                        auto item = party.chooseusableitem();
                        if (item->type == "Meds") {
                            party.group[i].useMeds(static_cast<Meds *>(item));
                        } else {
                            zombie.gethit1(static_cast<Throwables *>(item));
                        }
                        break;
                    }
                    case '3':
                        if (target != 4) {
                            cout << party.group[target].name << " is already defending." << endl;
                            goto move;
                        } else {
                            party.group[i].defending = true;
                            target = i;
                        }
                        break;
                    default:
                        cout<<"-wrong input";
                        goto move;
                        break;
                }
            
        }

        // Zombie attacks
        if (target == 4) {
            int adad = rand() % party.group.size();
            zombie.attack(party.group[adad]);
        } else {
            zombie.attack(party.group[target]);
            party.group[target].defending = false;
        }

        // Check if the fight should end
        if (zombie.health <= 0 || party.lose()) {
            break;
        }

        // Apply effects
        party.applyEffects();
        zombie.applyeffects();

        // Check if the fight should end again
        if (zombie.health <= 0 || party.lose()) {
            break;
        }

        // Delay to control loop iteration rate
        Sleep(2000);

        // Clear screen for next iteration
        system("cls");
    }
}
